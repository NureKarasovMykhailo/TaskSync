1 ПОБУДОВА UML ДІАГРАМИ ПРЕЦЕДЕНТІВ

Були визначені наступні актори: не авторизований користувач, авторизований 
користувач та адміністратор компанії.
Не авторизований користувач не має доступу до фунціоналу системи, доки не 
пройде процес авторизації, чи реєстрації.
Авторизований користувач має можливість перегляду та аналізу інформації, 
яка відноситься до компанії, у якій він зареєстрований.
Адміністратор компанії має можливість керувати сутностями робітників та 
активностей, у рамках компанії, до якої він відноситься. Також він має можливість 
записувати робітника, на найбільш оптимальну активність, за допомогою бізнес –
логіки, яка знаходиться на серверній частині.

2 ПОБУДОВА UML ДІАГРАМИ КОМПОНЕНТІВ

У системі було виділено наступні компоненти:
̶ Company – компонент, який відповідає за роботу з компанією, у якій 
зареєстрований користувач;
̶ Activity – компонент, що представляє сутність активності, тобто роботи 
у компанії;
̶ TimeTable – компонент, за допомогою якого здійснюється пошук
оптимальної активності для користувача;
̶ Worker – компонент для роботи з сутністю працівника;
Робітник компанії працює з компонентом компанії, який через відповідний 
інтерфейс передає йому інформацію про цю компанію.
Адміністратор компанії має діло з компонентами робітника та активності, та 
за допомогою інформації, яку надає компонент активності шукає оптимальну 
активність для користувача.

3 ПОБУДОВА UML ДІАГРАМИ ПАКЕТІВ

У системі було виділено наступні програмні пакети:
̶ App – кореневий пакет, відповідає за запуск застосунку;
̶ Models – пакет, який містить моделі відповідно до MVC архітектури;
̶ Controllers – пакет, який містить контролери відповідно до MVC 
архітектури;
̶ Views – пакет, що містить представлення відповідно до MVC 
архітектури;
̶ Network – пакет, який містить класи та методи для взаємодії мобільного 
застосунку з серверної частиною;
̶ Adapters – пакет, який містить адаптери, вони надають можливість 
виводу списку даних;
̶ Utills – пакет з допоміжними методами та класами;
̶ Res – пакет з Android ресурсами;

4 ПОБУДОВА UML ДІАГРАМИ ДІЯЛЬНОСТІ

Перед усім користувач має пройти процес авторизації, поки користувач не 
авторизований він не отримає доступ до усього функціоналу.
Після авторизації користувач може здійснювати діяльності пов’язані з 
активностями чи робітниками. При роботі з робітниками, за необхідності, 
користувач може знайти оптимальну активність для певного робітника, після чого 
він починає працювати з активностями.
Робота системи завершується, коли користувач виконав усі необхідні операції 
та вимкнув застосунок.

5 ОПИС ТЕХНОЛОГІЙ

Застосунок буде розроблений для мобільної платформи Android. Дана 
платформа є найбільш популярною ОС для мобільних пристроїв.
Мобільний клієнтський застосунок є частиною складної програмної системи
та взаємодіє з нею. А саме він буде взаємодіями з серверною частиною системи, за 
протоколом HTTP.
Для розробки мобільного клієнтського застосунку були обрані наступні 
технології: мова Kotlin, IDE Android Studio, для реалізації взаємодії з серверною 
частиною буде використовуватися бібліотека Retrofit. Даний вибір технологій є 
сучасним вибором для створення мобільних застосунків для платформи Android. 
Використання мови Kotlin для розробки Android застосунків, рекомендується 
компанією Google.

6 ОПИС АРХІТЕКТУРИ СИСТЕМИ

У проекті використовується MVC архітектура. Її ідея полягає у розділені 
застосунку на три основні шари:
Model – представляють дані та змініють свій стан на відповідь дій
контролеру;
Controller – інтерпретують дії користувача, змініють відповідним чином 
моделі;
View – представляють дані користувача, реагують на зміни моделей;
Даний тип архітектури дозволяє розподілити відповідальність (що є одним з 
принципом SOLID), є легкою у підтримувані, масштабованою.

7 ЛОГІКА РОБОТИ ЗАСТОСУНКУ

Опишімо логіку авторизації у системі (див. додаток А). Авторизація 
здійснюється за допомогою Jwt токену, у якому зашифровані найважливіші дані 
користувача, до яких є необхідність часто звертатися. Час «життя» токену 24 
години. Після успішної авторизації з серверної частини на мобільний – клієнт 
надходить Jwt токен, який зберігається у файлі налаштувань SharedPreference (див. 
додаток Б).
Опишемо логіку знаходження найбільш оптимальної активності, для певного 
робітника (див. додаток В). По – перше користувач обирає робітника, для якого він 
хоче знайти оптимальну активність. Далі при наявності у користувача ролі 
адміністратора компанії, у нього з’являється можливість знайти для користувача 
найбільш оптимальну активність та записати користувача на неї. Знаходження 
оптимальної активності відбувається за допомогою бізнес – логіки, розташованої 
на серверній частині програмної системи. Для знаходження активності 
використовується метод математичної згортки.