1 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

На діаграмі визначені наступні актори: не авторизований користувач (має можливість зареєструвати новий акаунт, чи увійти в існуючий аккаунт), звичайний користувач, робітник компанії, адміністратор компанії та системний адміністратор.
Звичайний користувач має можливість редагувати інформацію свого профіля, оформити підписку на сервіс та створити власну компанію та керувати нею.
Робітник компанії може переглядати інформацію, яка відноситься до даної компанії.
Адміністратор компанії керує бізнес – сутностями у рамках однієї компанії, до якої він належить.
Адміністратор системи керує усіма бізнес – сутностями системи та бізнес – процесами системи.

2 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

У системі було виділено наступні компоненти:
̶	Scanner – компонент сканеру, який являє собою сутність IoT пристрію;
̶	ScannerHistory – історія певного сканеру, використовую інтерфейс IScannerInfo, для отримання історії від сканеру;
̶	Workers – компонент, який представляє робітника компанії;
̶	Activities – компонент, який містить сутність діяльності на підприємстві;
̶	TimeTable – компонент робочого розкладу, для роботи необхідні дані про діяльності;
̶	AdminComponent – компонент для забезпечення можливості адміністрування системи;
Робітник компанії взаємодії з компонентом сканера, який забезпечує надходження інформації про сканування.
Адміністратор компанії взаємодіє з компонентами робітників та діяльностей, та за допомогою інформації, яку вони забезпечують створюють робочий розклад.
Адміністратор системи взаємодії з компонентом адміністрування, для адміністрування системи.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

На діаграмі було виділено наступні пакети (програмні модулі):
̶	App – кореневий пакет застосунку;
̶	Pages – пакет, який містить повні сторінки, які будуть показуватися користувачу;
̶	Components – пакет з різними UI компонентами, з яких складаються сторінки;
̶	API – пакет з класами, об’єктами та методами для взаємодії з серверною частиною;
̶	Locales – пакет з файлами локалізації;
̶	Store – пакет з класами, об’єктами та методами для забезпечування відстеження станів об’єктів;
̶	Utills – пакет з допоміжними функціями;
̶	Styles – пакет з CSS стилями;

4 ПОБУДОВА ДІАГРАМИ СТАНІВ

На діаграмі промодельована логіка, щодо створення оптимального робочого розподілу персоналу, по активностям, яка має компанії та які мають бути виконані.
Система обирає робітника, перевіряє чи має він спеціалізацію для виконання даної активності. Далі система, на основі історії від IoT пристроїв про фізичний стан робітника оцінює, чи зможе він виконати дану активність. У разі, коли фізичний стан робітника відповідає складності активності, система закріплює робітника на дану активність, якщо ні – переходить до іншого робітника та виконує весь алгоритм спочатку.

5 ОПИС ПРОГРАМНИХ ЗАСОБІВ

У якості програмних засобів для розробки веб – клієнту були обрані: мова програмування JavaScript, бібліотека React, взаємодія веб – клієнту з серверною частиною відбувається за допомогою бібліотеки Axios. Даний вибір був обумовлений тим, що дані програмні засоби є дуже популярними, мають велику спільноту, велику кількість бібліотек для вирішення великої кількості проблем, та не є складними.

6 ОПИС АРХІТЕКТУРИ

Як архітектурне рішення було обрана архітектура, основана на вертикальній «слайсовій» архітектурі. Її ідея полягає у розподілені коду на вертикальні шари, кожен з яких містить окрему бізнес - сутність. Кожен шар містить усі необхідні йому файли та/або модулі для реалізації певної логіки або функціональності. Основною перевагою цього підходу є модульність. Окремі часті коду легко виділяються в окремі модулі, без впливу на іншу частину застосунку. Також вона забезпечує високий рівень можливості до тестування та підтримки. Однак присутні проблеми з випадками дублювання коду та проблемами з ізоляцією шарів.

7 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ

Опишемо логіку авторизації у системі, яка є дуже важливою, бо користувач отримує доступ до майже усього функціоналу системи, лише після авторизації (див. додаток А). Авторизація відбувається за допомогою JWT токену, який отримується з серверної частини, у разі успішної авторизації користувачем. У токені зашифрована найважливіша інформація про користувача, до якої є необхідність часто звертатися. Сам токен зберігається у LocalStorage, від туди ж він і береться у разі необхідності зробити запит на сервер, який вимагає заголовок авторизації. Час «життя» токену – 24 години.
Інша частини логіки, яка є важливою для веб – застосунку, це маршрутизація. Маршрутизація відбувається за допомогою бібліотеки react-router-dom. У програмному коді визначається три масиви з маршрутами, для різних ролей користувачів (не авторизований користувач, авторизований користувач, адміністратор системи) (див. додаток Б). Користувач без відповідної ролі не зможе перейти по маршруту, який відноситься до масиву маршрутів, іншої ролі.
Щодо будови веб – компоненті, базова сторінка складається з трьох складових (див. додаток В): «шапки», основної частини та «підвалу». Крім того, під час роботи застосунку, за допомогою модулю MobX відбувається керування станом, авторизованого користувача. Це забезпечує швидкий доступ до інформації про авторизованого користувача, що сприяє підвищенню продуктивності застосунку.
