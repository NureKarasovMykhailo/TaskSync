2.5 Опис інженерних рішень
Посилання на демонстрацію роботи та функціональне тестування IoT
пристрою https://youtu.be/KX3Rzn0CbKw.
IoT пристрій розроблений за допомогою платформи Arduino та эмулятору 
Wokwi.
Сам пристрій складається з мікроконтролеру ESP32, датчика температури
DHT22, датчику пульсу та звичайної кнопки.
IoT пристрій взаємодіє з серверною частиною за REST API та по протоколу 
HTTP.
Програмний код IoT пристрою наведений у додатку А.
7
У програмному коді спочатку визначаються змінні, для підлючення до мережі 
Інтернет, шляху для відправки даних на сервер, та визначаються піни для датчиків 
та кнопки.
У функції setup() відбувається ініціалізації датчиків, підключення до мережі 
Інтернет та вивід відповідних повідомлень.
У функції loop від робітника очікується натискання на кнопку. При першому 
натисканні на кнопку зберігається час, коли він на неї натиснув. При другому 
натисканні вираховується різниця між другим та першим натисканням на кнопку, 
отримуються дані з датчика температури та датчику пульсу.
Після цього за допомогою бібліотеки HTTPClient, дані по визначеному 
маршруту та методу POST відправляються на серверну частину.
3 Висновки
У ході виконання лабораторної роботи був розроблений розумний пристрій, 
який є частиною складної програмної системи. З метою проектування, були 
створені UML діаграми. Окрім того був розроблений сам розумний прилад, та 
програмний код для його функціонування.
8
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ
1. Відеоролик з демонстрацією роботи серверної частини. URL 
https://youtu.be/KX3Rzn0CbKw
2. Посилання на GitHub репозиторій з джерельним кодом 
https://github.com/NureKarasovMykhailo/apz-pzpi-21-10-karasov-mykhailo
9
ДОДАТОК А
Програмний код
1. #include <WiFi.h>
2. #include <HTTPClient.h>
3. #include "DHTesp.h"
4. 
5. #define BUTTON_PIN 12
6. #define DHT_PIN 15
7. #define PULSE_PIN 35
8. 
9. const char* ssid = "Wokwi-GUEST";
10. const char* password = "";
11. 
12. const char* serverUrl = 
13. "http://host.wokwi.internal:5000/api/scanner-history/";
14. 
15. DHTesp dhtSensor;
16. 
17. unsigned long last_button_press = 0;
18. bool isMeasuring = false;
19. bool isButtonPressed = false;
20. float temperature = 0.0;
21. int pulse = 0;
22. unsigned long activeWorkedTime = 0;
23. int scannerId = 34;
24. 
25. void setup() {
26. Serial.begin(115200);
27. Serial.println("Esp 32 work start");
28. 
29. pinMode(BUTTON_PIN, INPUT_PULLUP);
30. dhtSensor.setup(DHT_PIN, DHTesp::DHT22);
31. 
32. WiFi.begin(ssid, password);
33. while (WiFi.status() != WL_CONNECTED) {
34. delay(100);
35. Serial.println("Connecting to WiFi...");
36. }
37. Serial.println("Connected to WiFi");
38. }
39. 
40. void loop () {
41. if (digitalRead(BUTTON_PIN) == LOW
42. && !isMeasuring && !isButtonPressed) {
43. delay(10); 
44. startMeasurement();
45. delay(20);
46. } else if (digitalRead(BUTTON_PIN) == HIGH
10
47. && isMeasuring && !isButtonPressed) {
48. isButtonPressed = true;
49. delay(10);
50. } else if (digitalRead(BUTTON_PIN) == LOW 
51. && isMeasuring && isButtonPressed) {
52. delay(10); 
53. stopMeasurement();
54. }
55. }
56. 
57. void startMeasurement() {
58. isMeasuring = true;
59. last_button_press = millis();
60. Serial.println("Time measurement started");
61. }
62. 
63. void stopMeasurement() {
64. isMeasuring = false;
65. activeWorkedTime = (millis() - last_button_press) / 100;
66. Serial.print("Time: ");
67. Serial.println(activeWorkedTime);
68. measureTemp();
69. measurePulse();
70. sendDataToServer();
71. }
72. 
73. void measureTemp() {
74. TempAndHumidity data = dhtSensor.getTempAndHumidity();
75. temperature = data.temperature;
76. Serial.print("Temperature: ");
77. Serial.print(temperature, 1);
78. Serial.println("°C");
79. }
80. 
81. void measurePulse() {
82. int pulseValue = analogRead(PULSE_PIN);
83. float voltage = pulseValue * (5.0 / 4095.0);
84. int heartRate = (voltage / 3.3) * 675;
85. pulse = heartRate;
86. Serial.print("Heart rate: ");
87. Serial.println(heartRate);
88. }
89. 
90. void sendDataToServer() {
91. if (WiFi.status() == WL_CONNECTED) {
92. HTTPClient http;
93. 
94. http.begin(serverUrl);
95. http.addHeader("Content-Type", "application/json");
96. 
97. String jsonPayload = "{";
98. jsonPayload += "\"temperature\": " + String(temperature) 
+ ",";
11
99. jsonPayload += "\"pulse\": " + String(pulse) + ",";
100. jsonPayload += "\"activeWorkedTime\": "
101. + String(activeWorkedTime) + ",";
102. jsonPayload += "\"scannerId\": " + String(scannerId);
103. jsonPayload += "}";
104. 
105. int httpResponseCode = http.POST(jsonPayload);
106. 
107. if (httpResponseCode > 0) {
108. String response = http.getString();
109. Serial.println("HTTP Response code: " + 
String(httpResponseCode));
110. Serial.println("Response: " + response);
111. } else {
112. Serial.println("Error on sending POST: " + 
String(httpResponseCode));
113. }
114. 
115. http.end();
116. } else {
117. Serial.println("WiFi Disconnected");
118. }
119. }
