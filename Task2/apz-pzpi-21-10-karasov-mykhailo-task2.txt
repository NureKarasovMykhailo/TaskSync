1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система складається з бази даних, серверної частини, IoT пристроїв, клієнтської частини та мобільної прикладної програми. У якості сервера бази даних обрано PostgreSQL. Обмін даними між сервером та БД проходить за допомогою відповідного драйверу.
Система взаємодіє з базою даних, за допомогою серверної частини. Крім цього серверна частина взаємодіє з веб – застосунком, мобільною прикладною програмою та IoT пристроями за протоколом HTTPS.
Сам користувач взаємодіє з системою за допомогою свого персонального комп’ютеру чи мобільного пристрою, які у свою чергу взаємодіють з клієнтською частиною по протоколу HTTPS.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Мета розробки UML діаграми розгортання полягає у моделюванні фізичної архітектури системи та її розміщення в середовищі виконання, визначення зав’язків між компонентами. UML діаграма розгортання для розроблюваної системи наведена на рисунку 1.
Система взаємодіє з базою даних, за допомогою серверної частини. Крім цього серверна частина взаємодіє з веб – застосунком, мобільною прикладною програмою та IoT пристроями за протоколом HTTPS.
Сам користувач взаємодіє з системою за допомогою свого персонального комп’ютеру чи мобільного пристрою, які у свою чергу взаємодіють з клієнтською частиною по протоколу HTTPS.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина побудована за принципами чистої архітектури. Головна ідея даної архітектури полягає у розподілу системи на окремі рівні абстракції. Це дозволяє забезпечити високий рівень масштабованості, зручності тестування та підтримки, та зменшує залежність між компонентами системи. Застосунок поділений на декілька шарів: шар домену (шар, який містить основну бізнес – логіку застосунку та моделі даних), шар застосунку (містить бізнес – логіку та функції обробки даних), шар представлення (шар, який містить інтерфейс користувача або API інтерфейс, через який користувач взаємодіє з сервером), шар інфраструктури (шар у якому розташовані залежності від бази даних, зовнішніх API, фреймворків та бібліотек).

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

У системі наявні три види звичайних акторів: незареєстрований користувач, зареєстрований користувач та робітник підприємства. Незареєстрований користувач має лише можливість зареєструватися чи авторизуватися у системі. Зареєстрований користувач може приєднатися до підприємства та оформити підписку на сервіс. Робітник підприємства (тобто користувач який зареєстрований у будь-якому підприємстві) має можливість провести сканування свого стану, та отримати результат сканування.
Також у системі наявні три типи акторів – адміністраторів: власник підприємства (користувач, який створив відповідне підприємство), адміністратор компанії та системний адміністратор. Власник підприємства може керувати усіма сутностями, які знаходяться у даному підприємстві, та формувати оптимальний робочий розклад робітників. Адміністратор підприємства має усі ж можливості власника підприємства, окрім зміни даних про саму сутність відповідного підприємства.
Системний адміністратор це окрема роль, користувачі з даним статусом мають можливість керувати усіма сутностями у системи, а також формувати резервні копії даних.

5 ПОБУДОВА ER-ДІАГРАМИ

ER – модель даних створюється з метою моделювання та візуалізації структури бази даних з точки зору сутностей та їх взаємозв’яків. Сама ER – модель наведена на рисунку 3.
ER – діаграма містить наступні сутності:
̶	Користувачі. Містить інформацію про користувачів застосунку;
̶	Ролі. Ролі, які можуть мати користувачі, окремий користувач може мати декілька ролей;
̶	Освіти. Освіти, які можуть мати користувачі. Користувач може мати декілька освіт;
̶	Підписки. Зберігають інформацію про підписку певного користувача. Одна підписка може належати одному користувача, користувач може мати багато підписок;
̶	Складність. Представляють дані про складність певної діяльності на підприємстві. Діяльність може мати лише одну складність, одна складність може відповідати декільком діяльностям;
̶	Підприємство. Містить інформацію про певне підприємство, у одному підприємстві може бути багато користувачів, один користувач може бути лише у одному підприємстві;
̶	Сканер. Представляє IoT пристрій  який можна закріпити за користувачем, підприємтство може мати багато сканерів, один сканер належить лише одному підприємству;
̶	Діяльності. Містить інформацію про певну діяльність, виконання якої вимагає певну освіту, та за яку можна закріпити користувачів, одна діяльність може мати багато користувачів;
̶	Історія сканування. Містить інформацію, яку надсилають IoT пристрої, відносяться до певного сканеру та користувача, історія сканування відповідає одному сканеру, один сканер може мати декілька історій сканування;

6 СПЕЦИФІКАЦІЯ REST

REST це архітектурний стиль для створення розподілених веб-систем. Свторімо REST специфікацію для серверної частини програмної системи (див. додаток А). REST специфікація допоможе визначити доступні маршрути, та їх призначення.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Створення UML діаграми компонентів дозволяє промоделювати високорівневу архітектуру системи, іденифікувати основні компоненти та їх зв'яки.
ВИділимо наступні компоненти:
- Employee - робітник на підприємстві
- ScannerInfo - інформація від сканеру, про стан робітника
- Scanner - IoT пристрій
Компонент Employee отримує від компоненту Scanner обьект ScannerInfo

ВИСНОВКИ

У ході виконання даної лабораторної роботи була розроблена серверна
частини програмної системи. З метою проектування архітектури, визначення 
функціоналу та бізнес – процесів були створені UML – діаграми. Окрім, того була
розроблена база даних та втілена бізнес – логіка серверної частини.

ДОДАТОК А
Специфікація REST
1. Контролер: «Активності»
Метод: POST	
URL: /activity/	
Опис: Створює нову активність
2. Контролер: «Активності»	
Метод: GET
URL: /activity/ 
Опис:Отримання усіх активностей
3. Контролер: «Активності»
Метод: GET	
URL: /activity/{id} 	
Опис: Отримання активності по id
4. Контролер: «Активності»
Метод: PUT	
URL: /activity/{id} 	
Опис: Оновлення активності
5. Контролер: «Активності»
Метод: POST	
URL: /activity/add-employee/{id}	
Опис: Закріплення робітника за аквтиностею
6. Контролер: «Активності»
Метод: POST	
URL: /activity/delete-employee/{id}	
Опис: Видалення робітника з активності
7. Контролер: «Авторизація»
Метод: POST	
URL: /auth/registration	
Опис: Реєстрація користувача
8. Контролер: «Авторизація»
Метод: POST	
URL: /auth/login	
Опис: Авторизація
9. Контролер: «Авторизація»
Метод: GET	
URL: /auth/check-auth	
Опис: Перевірка авторизації
10. Контролер: «Підприємство»
Метод: POST	
URL: /company/ 	
Опис: Створення нового підприємства
11. Контролер: «Підприємство»
Метод: GET	
URL: /company/	
Опис: Отримання підприємства по JWT токену
12. Контролер: «Активності»
Метод: PATCH	
URL: /company/	
Опис: Оновлення підприємства по JWT токену
13. Контролер: «Підприємство»
Метод: POST	
URL: /company/add-employee/{id}	
Опис: Додавання робітника до підприємства
14. Контролер: «Підприємство»
Метод: DELETE	
URL: /company/delete-employee/{id}
Опис: Видалення робітника з підприємства
15. Контролер: «Підприємство»
Метод: GET	
URL: /company/employees
Опис: Отримання усіх користувачів підприємства
16. Контролер: «Підприємство»
Метод: GET	
URL: /company/employees/{id}
Опис: Отримання робітника підприємства по ID
17. Контролер: «Складність»
Метод: POST	
URL: /complexity/ 
Опис: Створення нової складності
18. Контролер: «Складність»
Метод: GET	
URL: /complexity/ 
Опис: Отримання усіх складностей
19. Контролер: «Складність»
Метод: GET	
URL: /complexity/{id} 
Опис: Отримати складність по id
20. Контролер: «Складність»
Метод: PUT	
URL: /complexity/{id} 
Опис: Оновити складність по {id}
21. Контролер: «Складність»
Метод: DELETE	
URL: /complexity/{id} 
Опис: Видалити складність по id
22. Контролер: «База даних»
Метод: GET	
URL: /db/ 
Опис: Отримання резервної копії бази даних
23. Контролер: «Освіти»
Метод: POST	
URL: /education/ 
Опис: Створення нової освіти
24. Контролер: «Освіти»
Метод: GET	
URL: /education/ 
Опис: Отримання усіх освіт
25. Контролер: «Освіти»
Метод: GET	
URL: /education/{id}
Опис: Отримання освіти по id
26. Контролер: «Освіти»
Метод: PUT	
URL: /education/{id}
Опис: Оновити освіту по id
27. Контролер: «Освіти»
Метод: DELETE	
URL: /education/{id}
Опис: Видалити освіту по id
28. Контролер: «Користувач»
Метод: POST	
URL: /public-user/patch/
Опис:  Оновлення даних користувача по JWT токену
29. Контролер: «Користувач»
Метод: PUT	
URL: public-user/add-education/
Опис:  Додавання освіти користувачу
30. Контролер: «Користувач»
Метод: PUT	
URL: public-user/delete-education
Опис: Видалення освіти у користувача
31. Контролер: «Користувач»
Метод: POST	
URL: /public-user/subscribe
Опис: Відправити до API запит на оформлення підписки
32. Контролер: «Ролі»
Метод: POST	
URL: /role/ 
Опис: Додати роль
33. Контролер: «Ролі»
Метод: GET	
URL: /role/ 
Опис: Отримати усі ролі
35. Контролер: «Ролі»
Метод: PUT	
URL: /role/{id}
Опис: Оновити роль по id
36. Контролер: «Ролі»
Метод: DELETE	
URL: /role/{id}
Опис: Видалити роль по id
37. Контролер: «Історія сканеру»
Метод: POST	
URL: /scanner-history 
Опис: Створення історії сканеру
38. Контролер: «Історія сканеру»
Метод: GET	
URL: /scanner-history/scanner/{id}
Опис: Отримати історію сканування для певного сканеру
39. Контролер: «Історія сканеру»
Метод: GET	
URL: /scanner-history/{id}
Опис: Отримати історію сканеру по id
40. Контролер: «Історія сканеру»
Метод: DELETE	
URL: /scanner-history/scanner/{id}
Опис: Очистити історію певного сканеру
40. Контролер: «Історія сканеру»
Метод: DELETE	
URL: /scanner-history/{id}
Опис: Видалення історії сканеру по id
41. Контролер: «Сканер»
Метод: POST	
URL: /scanner/
Опис: Створення нового сканеру
42. Контролер: «Сканер»
Метод: GET	
URL: /scanner/
Опис: Отримання усіх сканерів
43. Контролер: «Сканер»
Метод: GET	
URL: /scanner/{id} 
Опис: Отримання сканеру по id
44. Контролер: «Сканер»
Метод: PUT	
URL: /scanner/{id} 
Опис: Оновлення сканеру по id
45. Контролер: «Сканер»
Метод: DELETE	
URL: /scanner/{id} 
Опис: Видалення сканеру по id
46. Контролер: «Робочий розклад»
Метод: GET	
URL: /time-table/{id}  
Опис: Отримання найбільш підходящого робітника для виконання активності
47. Контролер: «Робочий розклад»
Метод: GET	
URL: /time-table/{id} 
Опис: Формування оптимальногорозподілу робітників по активностям
