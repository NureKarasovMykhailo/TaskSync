2.5 Опис інженерних рішень


Посилання на демонстрацію функціоналу серверної частини: https://youtu.be/DjWw4isPj3M 
Почнемо з опису бази даних. У якості СУБД, було обрано реляційну базу даних PostgreSQL. Даний тип баз даних було обрано через те, вони дозволяють структурувати та узгодити дані за допомогою таблиць, що сприяє цілісності даних, та забезпеченню транзакційної безпеки. Сама СУБД PostgreSQL обрана через те, що вона є масштабованою, продуктивною, має велику спільноту та підтримує високу кількість вбудованих функцій.
Серверна / back-end частина написана за допомогою програмної платформи Node JS, фреймворку Express JS та мови програмування TypeScript.
Серверна частина відповідає за усю бізнес – логіку програмної системи. Серверна частина побудована за принципами чистої архітектури. Головна ідея даної архітектури полягає у розподілу системи на окремі рівні абстракції. Це дозволяє забезпечити високий рівень масштабованості, зручності тестування та підтримки, та зменшує залежність між компонентами системи. Застосунок поділений на декілька шарів: шар домену (шар, який містить основну бізнес – логіку застосунку та моделі даних), шар застосунку (містить бізнес – логіку та функції обробки даних), шар представлення (шар, який містить інтерфейс користувача або API інтерфейс, через який користувач взаємодіє з сервером), шар інфраструктури (шар у якому розташовані залежності від бази даних, зовнішніх API, фреймворків та бібліотек).
Сам сервер взаємодіє у усіма іншими клієнтськими компонентами програмної системи за допомогою REST API (див. таблицю 1). Взаємодія з базою даних відбувається за допомогою ORM Sequelize.
Розглянемо бізнес – логіку пов’язану з авторизацією у системі. Авторизація у системі здійснюється за допомогою «Json Web Token», або JWT токену. Токен генерується при успішній авторизації чи реєстрації користувача, та містить дані користувача, до яких є необхідність часто звертатися. Час існування токену дорівнює 24 години, після закінчення цього часу користувачу прийдеться знову авторизуватися у системі.
Інша частина бізнес – логіки, яку я б хотів описати, це оформлення підписки на сервіс (див. додаток А). Оформлення підписки здійснюється за допомогою PayPal API. Якщо користувач, успішно оформив підписку, то для даного користувача створюється сутність підписки, яка містить усі дані про неї. Користувач, який оформив підписку може додати власне підприємство (тільки одне) до системи.
Опишемо бізнес – логіку з формування оптимального робочого розкладу (див. додаток б). Для пошуку для даної активності кращого робітника використовується метод математичної згортки. Обирається користувач, який має необхідну освіту, потім отримується інформація від IoT пристрою, про стан даного робітника (температура, пульс, час, який користувач працював). Ці дані, та складність виконання активності переводяться у чисельний коефіцієнт, який чим більший тим більш даний коефіцієнт відхиляється від норми. На основі цих даних формується згортка та обирається користувач, який має найбільше значення згортки.
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ
1. Відеоролик з демонстрацією роботи серверної частини. URL https://youtu.be/DjWw4isPj3M 
2. Посилання на GitHub репозиторій з джерельним кодом https://github.com/NureKarasovMykhailo/apz-pzpi-21-10-karasov-mykhailo 
 
ДОДАТОК А
Оформлення підписки

1. export default class SubscriptionClass {
2. 
3.     private RETURN_URL:string = 
4. 	'http://localhost:5000/api/public-user/subscribe/succeed';
5.     private CANCEL_URL:string = 
6. 	'http://localhost:5000/api/subscription/pay-pal-cancel-  7.payment';
8.     private AUTH: string = 
9. 	Buffer.from(process.env.CLIENT_ID + 
10. 	':' + 
11. 	process.env.PAY_PAL_SECRET_KEY).toString('base64');
12.     private SUBSCRIPTION_PAY_LOAD = {
13.         "plan_id": process.env.PLAN_ID,
14.         "application_context": {
15.             "brand_name": "TaskSync Subscription",
16.             "locale": "en-US",
17.             "user_action": "SUBSCRIBE_NOW",
18.             "payment_method": {
19.                 "payer_selected": "PAYPAL",
20.                 "payee_preferred": 21."IMMEDIATE_PAYMENT_REQUIRED"
22.             },
23.             "return_url": this.RETURN_URL,
24.             "cancel_url": this.CANCEL_URL
25.         }
26.     }
27. 
28.     constructor() {
29. 
30.     }
31. 
32.     async subscribeRequest() {
33. 
34.         return await 
35. 	    fetch('https://api-36.m.sandbox.paypal.com/v1/billing/subscriptions', {
37.             method: 'post',
38.             body: 36.JSON.stringify(this.SUBSCRIPTION_PAY_LOAD),
39.             headers: {
40.                 'Authorization': 'Basic ' + this.AUTH,
41.                 'Content-Type': 'application/json'
42.             },
43.         });
44.     }
45. 
46.     async isSubscriptionValid(subscribe: Subscribe) {
47.         const response = await fetch(
48. 		`https://api-m.sandbox.paypal.com/v1/ ` + `
49. 		billing/subscriptions/${subscribe.code}`, {
50.             method: 'get',
51.             headers: {
52.                 'Authorization': 'Basic ' + this.AUTH,
53.                 'Content-Type': 'application/json'
54.             }
55.         });
56.         const subscriptionDetails = await response.json();
57.         console.log(subscriptionDetails.status)
58.         return subscriptionDetails.status === 'ACTIVE' 
59. 		|| subscriptionDetails.status === 'APPROVAL_PENDING'
60. 		 || subscriptionDetails.status === 'EXPIRED';
61.     }
62. }
 
Додаток Б
Знаходження найкращого робітника для виконання активності

1. export default class TimeTableManager {
2. 
3.     private _activities: ActivityDomainModel[];
4.     private _scannerHistory: ScannerHistoryDomainModel;
5.     private _coefficientsArray!: CoefficientsData[];
6. 
7.     constructor(
8.        activities: ActivityDomainModel[],
9.        scannerHistory: ScannerHistoryDomainModel
10.     ) {
11.         this._activities = activities;
12.         this._scannerHistory = scannerHistory;
13.         this._coefficientsArray = 14.this.getCoefficientsArray();
15.     }
16. 
17.     public getOptimalActivity(): number {
18.         const maxCoefficientData = 19.this.getCoefficientsWithMaxData(this._coefficientsArray);
20. 
21. 
22.         for (let i = 0; i < this._coefficientsArray.length; 23.i++) {
24.             this._coefficientsArray[i].totalCoefficient =
25.                 26.this._coefficientsArray[i].complexityCoefficient / 27.maxCoefficientData.complexityCoefficient +
28.                 this._coefficientsArray[i].pulseCoefficient  29./ maxCoefficientData.pulseCoefficient +
30.                 31.this._coefficientsArray[i].temperatureCoefficient / 32.maxCoefficientData.temperatureCoefficient +
33.                 34.this._coefficientsArray[i].complexityCoefficient / 35.maxCoefficientData.complexityCoefficient;
36.         }
37. 
38.         this._coefficientsArray = 39.this._coefficientsArray.sort((a, b) => b.totalCoefficient – 40.a.totalCoefficient);
41. 
42.         return this._coefficientsArray[0].activityId;
43. 
44.     }
45. 
46.     private getCoefficientsArray() {
47.         let coefficientsArray: CoefficientsData[] = [];
48. 
49.         for (let i = 0; i < this._activities.length; i++) {
50. 
51.             let coefficientsData = new CoefficientsData(
52.                 this._activities[i].id,
53.                 54.this.getTemperatureCoefficient(this._scannerHistory.temperature),
55.                 56.this.getPulseCoefficients(this._scannerHistory.pulse),
57.                 58.this.getActiveWorkCoefficients(this._scannerHistory.activeWo 59.rkedTime),
60.                 this._activities[i].complexity?.evaluation 45.|| 61
62.             );
63.             coefficientsArray.push(coefficientsData);
64.         }
65. 
66.         return coefficientsArray;
67.     }
68. 
69.     private getTemperatureCoefficient(temperature: number): 70.number {
71.         switch (true) {
72.             case (temperature <= 36.6):
73.                 return 1;
74.             case (temperature > 36.6 && temperature <= 37):
75.                 return 1.2;
76.             case (temperature > 37 && temperature <= 37.5):
77.                 return 1.5;
78.             case (temperature > 37.5 && temperature <= 38):
79.                 return 2;
80.             case (temperature > 38 && temperature <= 38.5):
81.                 return 3;
82.             case (temperature > 38.5 && temperature <= 39):
83.                 return 4;
84.             default:
85.                 return 5;
86.         }
87.     }
88. 
89.     private getPulseCoefficients(pulse: number): number {
90.         switch (true) {
91.             case (pulse <= 60):
92.                 return 1;
93.             case (pulse > 60 && pulse <= 80):
94.                 return 1.2;
95.             case (pulse > 80 && pulse <= 100):
96.                 return 1.5;
97.             case (pulse > 100 && pulse <= 120):
98.                 return 2;
99.             case (pulse > 120 && pulse <= 140):
100.                 return 3;
101.             case (pulse > 140 && pulse <= 160):
102.                 return 4;
103.             default:
104.                 return 5;
105.         }
106.     }
107. 
108.     private 109.getActiveWorkCoefficients(activeWorkTimeInSeconds: number): 110.number {
111.         const activeWorkTimeInHours = 112.activeWorkTimeInSeconds;
113.         switch (true) {
114.             case (activeWorkTimeInHours <= 7200):
115.                 return 1;
116.             case (activeWorkTimeInHours > 7200 && 117.activeWorkTimeInHours <= 14400):
118.                 return 1.2;
119.             case (activeWorkTimeInHours > 14400 && 120.activeWorkTimeInHours <= 21600):
121.                 return 1.5;
122.             case (activeWorkTimeInHours > 21600 && 123.activeWorkTimeInHours <= 28800):
124.                 return 2;
125.             case (activeWorkTimeInHours > 28800 && 126.activeWorkTimeInHours <= 36000):
127.                 return 3;
128.             case (activeWorkTimeInHours > 36000 && 129.activeWorkTimeInHours <= 43200):
130.                 return 4;
131.             default:
132.                 return 5;
133.         }
134.     }
135. 
136. 
137.     private getCoefficientsWithMaxData(coefficientsArray: 138.CoefficientsData[]) {
139.         let maxPulseCoefficient = Number.MIN_SAFE_INTEGER;
140.         let maxTemperatureCoefficient = 141.Number.MIN_SAFE_INTEGER;
142.         let maxActiveWorkTimeCoefficient = 143.Number.MIN_SAFE_INTEGER;
144.         let maxComplexityCoefficient = 145.Number.MIN_SAFE_INTEGER;
146. 
147.         for (let i = 0; i < coefficientsArray.length; i++) 148.{
149.             if (maxPulseCoefficient < 150.coefficientsArray[i].pulseCoefficient) {
151.                 maxPulseCoefficient = 152.coefficientsArray[i].pulseCoefficient;
153.             }
154.
155.             if (maxTemperatureCoefficient < 156.coefficientsArray[i].temperatureCoefficient) {
157.                 maxTemperatureCoefficient = 158.coefficientsArray[i].temperatureCoefficient;
159.             }
160. 
161.             if (maxActiveWorkTimeCoefficient < 162.coefficientsArray[i].workTimeCoefficient) {
163.                 maxActiveWorkTimeCoefficient = 164.coefficientsArray[i].workTimeCoefficient;
165.             }
166. 
167.             if (maxComplexityCoefficient < 168.coefficientsArray[i].complexityCoefficient) {
169.                 maxComplexityCoefficient = 170.coefficientsArray[i].complexityCoefficient;
171.             }
172.         }
173. 
174.         return new CoefficientsData(
175.             0,
176.             maxTemperatureCoefficient,
177.             maxPulseCoefficient,
178.             maxActiveWorkTimeCoefficient,
179.             maxComplexityCoefficient
180.         );
181. 
182.     }
183. 
184. }
